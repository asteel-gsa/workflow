---
name: Auto Generate PR
on:
  workflow_call:
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PR_NUMBER: ${{ github.event.number }}

jobs:
  check-commit:
    runs-on: ubuntu-latest
    name: Check For a Commit
    outputs:
        should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v3
      - name: print latest commit
        run: echo ${{ github.sha }}

      - name: Check if There Has Been A Commit
        id: should_run
        continue-on-error: false
        run: |
          sha=$(git rev-list --after="24 hours" ${{ github.sha }})
          if test -z $sha
          then
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi
        #run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "::set-output name=should_run::false"
        # run: |
        #     test -z $(git rev-list  --after="24 hours" ${{ github.sha }})
        #     echo "should_run=false" >> $GITHUB_OUTPUT

  pull-request:
    name: Create Pull Request
    needs: [check-commit]
    if: ${{ needs.check-commit.outputs.should_run != 'false' }}
    runs-on: ubuntu-latest
    outputs:
        pr_number: ${{ steps.open-pr.outputs.pr_number }}
    steps:
      - uses: actions/checkout@v3
      - name: Get Date
        id: date
        run: |
          echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT

      - name: Get Git short Commit
        id: git-short
        run: |
          echo "short_sha=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT

      - name: Open pull request
        id: open-pr
        run: |
          gh pr create --title "${{ steps.date.outputs.date }} ${{ steps.git-short.outputs.short_sha }} main -> test" --body "This is an auto-generated PR to merge main into prod for a staging release on ${{ steps.date.outputs.date }} with the last commit being merged as ${{ steps.git-short.outputs.short_sha }}" --base test --head main
          pr_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH") >> $GITHUB_OUTPUT

      - name: Comment on PR
        id: comment-pr
        run: |
          gh pr comment ${{ steps.open-pr.outputs.pr_number }} --body "This PR will be closed and re-opened to ensure that a terraform plan is generated on the PR for the staging deployment after merging."

      - name: Close the Pull Request
        run: |
          gh pr close ${{ steps.open-pr.outputs.pr_number }}

      - name: Reopen the Pull Request
        run: |
          gh pr reopen ${{ steps.open-pr.outputs.pr_number }}

  # close-and-open-pr:
  #     name: Close and reopen the pull request
  #     needs: [pull-request]
  #     runs-on: ubuntu-latest
  #     steps:
  #     - name: Close the Pull Request
  #       run: |
  #         gh pr close ${{ needs.pull-request.outputs.pr_number }}

  #     - name: Reopen the Pull Request
  #       run: |
  #         gh pr reopen ${{ needs.pull-request.outputs.pr_number }}

  # auto-approve:
  #   name: Auto Approve Created PR
  #   needs: [pull-request]
  #   if: ${{ needs.pull-request.outputs.pr_number != null }}
  #   runs-on: ubuntu-latest
  #   permissions:
  #       pull-requests: write
  #   steps:
  #     - uses: hmarr/auto-approve-action@v3
  #       with:
  #         pull-request-number: ${{ needs.pull-request.outputs.pr_number }}
  #         github-token: ${{ secrets.GITHUB_TOKEN }}

  # auto-merge:
  #   name: Auto Merge The Approved PR
  #   needs: [auto-approve, pull-request]
  #   if: ${{ needs.pull-request.outputs.pr_number != null }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - id: automerge
  #       name: automerge
  #       uses: pascalgn/automerge-action@v0.15.6
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         MERGE_RETRIES: 50
  #         MERGE_RETRY_SLEEP: 30000
  #         MERGE_METHOD: merge
